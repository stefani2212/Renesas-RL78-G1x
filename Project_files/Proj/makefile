#Note: Using a variable in a make file involves using the dollar sign ($) and then the variable name in parentheses.
#Note: Although some make utilities can automatically determine what .h files a file depends on, some cannot, so you should list the include dependencies.

# ---------------------------------------------------------------------------
# Main Defines
# ---------------------------------------------------------------------------
# Renessas - R5F104BCH 
ARM = D:\RL78\4.9_2018q1
TARGETPATH = .
HOSTNAME := $(shell hostname)

# Object files directory
#     To put object files in current directory, use a dot (.), do NOT make
#     this an empty or blank macro!
OBJDIR = .

INCDIR = 
INCDIR += -I ..\Iveco_WL_BSS\SW_Platform
INCDIR += -I ..\Iveco_WL_BSS\SW_Platform\Peripherals\Mcu
INCDIR += -I ..\Iveco_WL_BSS\SW_Platform\Peripherals\Gpio
# Files generated by Applilet application
INCDIR += -I ..\Iveco_WL_BSS\SW_Platform\Config\src



INCDIR += -I ..\Iveco_WL_BSS\Application
INCDIR += -I ..\Iveco_WL_BSS\Application\DevMA
INCDIR += -I ..\Iveco_WL_BSS\Application\ECMA
INCDIR += -I ..\Iveco_WL_BSS\Application\VFB
INCDIR += -I ..\Iveco_WL_BSS\Application\VLMA
INCDIR += -I ..\Iveco_WL_BSS\Application\VFB
INCDIR += -I ..\Iveco_WL_BSS\Application\VFB\VFB_Components

# ---------------------------------------------------------------------------
# List C source files here
SRC =

# SW_Platform
SRC += ..\Iveco_WL_BSS\SW_Platform\main.c
SRC += ..\Iveco_WL_BSS\SW_Platform\Peripherals\Mcu\Mcu.c
SRC += ..\Iveco_WL_BSS\SW_Platform\Peripherals\Gpio\Gpio.c
# Application
SRC += ..\Iveco_WL_BSS\Application\DevMA\DEVMA_DeviceManager.c
SRC += ..\Iveco_WL_BSS\Application\ECMA\ECMA_ExternalCommManagement.c
SRC += ..\Iveco_WL_BSS\Application\VFB\VFB.c
SRC += ..\Iveco_WL_BSS\Application\VLMA\Vlma_VoltageMonitorSensor.c
SRC += ..\Iveco_WL_BSS\Application\VLMA\Vlma_VoltageMonitorSensorConfig.c
SRC += ..\Iveco_WL_BSS\Application\VLMA\Vlma_VoltageProcess.c
#Additional files generated by Applilet
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_main.c 
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_hardware_setup.c
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_cg_adc.c
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_cg_adc_user.c
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_cg_cgc.c
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_cg_cgc_user.c
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_cg_lvd.c
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_cg_lvd_user.c
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_cg_port.c
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_cg_port_user.c
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_cg_serial.c
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_cg_serial_user.c
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_cg_vector_table.c
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_cg_wdt.c 
SRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_cg_wdt_user.c
# ##########################
# List CPP source files here
# ##########################
CPPSRC =

# ################################
# List Assembler source files here
# ################################
ASRC  = 
ASRC += ..\Iveco_WL_BSS\SW_Platform\startup.asm
#Additional files generated by Applilet
#ASRC += ..\Iveco_WL_BSS\SW_Platform\Config\src\r_reset_program.asm

# Additional libraries and object files to link
LIB = 
LIB += $(ARM)\rl78-elf\lib\libc.a
LIB += $(ARM)\lib\gcc\rl78-elf\4.9.2.201801-GNURL78\g14\libgcc.a


# Additional includes to compile
INC = .


# ---------------------------------------------------------------------------
# Translator's Definitions
CC      = $(ARM)\bin\rl78-elf-gcc.exe
CPP     = $(ARM)\bin\rl78-elf-g++.exe
#CPP    = $(ARM)\arm-none-eabi-g++.exe
AS      = $(ARM)\bin\rl78-elf-as.exe
NM      = $(ARM)\bin\rl78-elf-nm.exe
CP      = XCOPY
RM      = erase /f /q 
RN      = mv
LD      = $(ARM)\bin\rl78-elf-ld.exe
BIN     = $(ARM)\bin\rl78-elf-objcopy.exe
DUMP    = $(ARM)\bin\rl78-elf-objdump.exe
SIZE    = $(ARM)\bin\rl78-elf-size.exe
#LIBDIR  = $(ARM)\arm-none-eabi\lib\armv7e-m
#    SHELL   = $(MSP430)\bin\sh.exe


# ---------------------------------------------------------------------------
# default compiler flags
#   CPFLAGS = -c -g -Os -Wall -Wstrict-prototypes -Wa,-ahlms=$(<:.c=.lst)
CFLAGS = -c 
CFLAGS += -D$(HW_VER)
CFLAGS += -D$(PART)
CFLAGS += -mcpu=g14
CFLAGS += -mg14
CFLAGS += -mrl78
CFLAGS += -ms3
CFLAGS += -m32bit-doubles
#CFLAGS += -mfloat-abi=soft -mfpu=fpv4-sp-d16 -march=armv7e-m
CFLAGS += -Os
#CFLAGS += -MD		#generate dependency file
CFLAGS += --all-warnings
#CFLAGS += -std=gnu99

CFLAGS += -fdata-sections
CFLAGS += -ffunction-sections
CFLAGS += -Wall
CFLAGS += -Wconversion
CFLAGS += -Werror=implicit-function-declaration
CFLAGS += -Werror=unused-value
CFLAGS += -Werror=parentheses
CFLAGS += -Werror=return-type
CFLAGS += -Wtype-limits
CFLAGS += -Wunused-function
CFLAGS += -Wunused-variable
CFLAGS += -Warray-bounds
CFLAGS += -Wcoverage-mismatch
CFLAGS += -Wdiv-by-zero
CFLAGS += -Wfloat-equal
CFLAGS += -Woverflow
CFLAGS += -Wswitch
CFLAGS += -Wtype-limits
CFLAGS += -Wno-packed-bitfield-compat
CFLAGS += $(INCDIR)
#CFLAGS += -print-search-dirs
#CFLAGS += -Wa,-adhlns=$(subst $(suffix $<),.lst,$<)


#CFLAGS += -print-search-dirs


# -mno-stack-init - 
# ---------------------------------------------------------------------------
## not to restore information about registration
# CPFLAGS += -Ddbg_no_restore_reg_at_start
## to show registration and syncronization state
# CPFLAGS += -Ddbg_show_reg_and_sync
CPPFLAGS = 
CPPFLAGS += -mcpu=$(CPU)
CPPFLAGS += -D$(PART)
CPPFLAGS += -D$(HW_VER)
CPPFLAGS += -Os
CPPFLAGS += -fdata-sections
CPPFLAGS += -ffunction-sections
CPPFLAGS += -Wconversion
CPPFLAGS += $(INCDIR)


# ---------------------------------------------------------------------------
## set HARDWARE modification


# ---------------------------------------------------------------------------
# default assembler flags
#    ASFLAGS = -gstabs
#    ASFLAGS = -g -Os -Wall -Wstrict-prototypes
ASFLAGS = 
ASFLAGS += --mrl78
ASFLAGS += --ms3
ASFLAGS += --mg14
ASFLAGS += --m32bit-doubles
#ASFLAGS += -al
#ASFLAGS += -am
#ASFLAGS += -as


# ---------------------------------------------------------------------------
# default linker flags
#    LDFLAGS = -nostartfiles -nostdlib -Wl,-Map=$(TRG).map,--cref
#    LDFLAGS = -nostartfiles -Wl,-Map=$(TRG).map,--cref
LDFLAGS =
#LDFLAGS += -Map=$(TRG).map
LDFLAGS += --library-path $(LIBDIR)
#LDFLAGS += -rpath-link $(ARM)\lib
LDFLAGS += --gc-sections
#LDFLAGS += --print-gc-sections
LDFLAGS += -fatal-warnings
#LDFLAGS += -static		#Do not link against shared libraries
LDFLAGS += -nostdlib	#Only use library directories specified on the command line
#LDFLAGS += -cref
LDFLAGS += -z defs
LDFLAGS += --error-unresolved-symbols
LDFLAGS += --warn-alternate-em
LDFLAGS += --unresolved-symbols=report-all
#LDFLAGS += --no-allow-shlib-undefined
LDFLAGS += --no-undefined
LDFLAGS += --no-accept-unknown-input-arch
#LDFLAGS += --verbose
#LDFLAGS += --stats
#LDFLAGS += --trace
LDFLAGS += -TRL78G14.ld


# ---------------------------------------------------------------------------
# the file which will include dependencies
DEPEND = $(SRC:.c=.d) $(CPPSRC:.cpp=.d)


# ---------------------------------------------------------------------------
# define all project specific object files
OBJ =  $(ASRC:.asm=.o) $(SRC:.c=.o) $(CPPSRC:.cpp=.o)


MSG_BEGIN = ----------- begin -----------
MSG_END = ----------- end -----------
MSG_COMPILING = Compiling C:
MSG_COMPILING_CPP = Compiling CPP:
MSG_LINKING = Linking:


# ---------------------------------------------------------------------------
# this defines the aims of the make process
#all: $(DEPEND) $(TRG).elf $(TRG).hex $(TRG).bin $(TRG).sss ok
#build: $(TRG).elf $(TRG).hex $(TRG).bin nm ok
build: $(TRG).elf $(TRG).bin $(TRG).hex ok


# ---------------------------------------------------------------------------
#assemble: instructions to create object file from assembler files
%o: %asm
	@echo Assembling: $<
	@if exist $@ $(RM) $@
	@$(AS) $(ASFLAGS) -adhlns=$(subst $(suffix $<),.lst,$<) $< -o $@


#compile: instructions to create assembler and/or object files from C source
%o: %c
	@echo Compiling:  $<
	@if exist $@ $(RM) $@
	@$(CC) $(CFLAGS) $< -o $@

	
#compile: instructions to create assembler and/or object files from CPP source
%o: %cpp
	@echo Compiling cpp:  $<
	@if exist $@ $(RM) $@
	@$(CPP) -c $(CPPFLAGS) $< -o $@


#link: instructions to create elf output file from object files
$(TRG).elf: $(OBJ)
	@echo Linking:  $@
	@$(LD) $(LDFLAGS) --start-group $(OBJ) $(LIB) --end-group -o $@

#create bin (ihex, srec) file from elf output file
%bin: %elf
	$(BIN) --remove-section .RAMVectorTable --remove-section .RAMAppBootIf --remove-section .noinit -O binary $< $@

#create hex file from elf output file
%hex: %elf
	$(BIN) --remove-section .RAMVectorTable --remove-section .RAMAppBootIf --remove-section .noinit -O ihex $< $@

#create assempler lst without c source
%sss: %elf
	$(DUMP) -DS $< > $@


 # include the dependencies unless we're going to clean, then forget about them.
 #ifneq ($(MAKECMDGOALS), clean)
 #-include $(DEPEND)
 #endif
 # dependencies file
 # includes also considered, since some of these are our own
 # (otherwise use -MM instead of -M)
 %.d: %.c
	@$(CC) -M ${CFLAGS} $< >$@

  
 %.d: %.cpp
	@$(CPP) -M ${CPPFLAGS} $< >$@



# ---------------------------------------------------------------------------
nm:
	$(NM) -f sysv -n -S $(TRG).elf


ok:
	$(SIZE) $(TRG).elf
	@echo ----------------------------
	@echo Errors: none

# ---------------------------------------------------------------------------
# make instruction to delete created files
clean:
	@echo Cleaning...
	$(RM) $(OBJ)
	$(RM) $(TRG).*
#	@$(RM) $(SRC:.c=.lst)

#	@$(RM) $(TRG).elf
# @$(RM) $(DEPEND)


# ---------------------------------------------------------------------------
# make instruction to rebuild the project
rebuild: clean build

all: rebuild
# ---------------------------------------------------------------------------
# dependecies, add any dependencies you need here

# ---------------------------------------------------------------------------
